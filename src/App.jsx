import React, { useState, useEffect } from 'react';
import toast, { Toaster } from 'react-hot-toast';
import io from 'socket.io-client';
import { Plus, Calendar, StopCircle } from 'lucide-react'; // Import c√°c icon c·∫ßn thi·∫øt

import CreateStreamForm from './components/CreateStreamForm'; // Import component m·ªõi
import StreamList from './components/StreamList';       // Import component m·ªõi

// Kh·ªüi t·∫°o k·∫øt n·ªëi Socket.IO b√™n ngo√†i component ƒë·ªÉ tr√°nh kh·ªüi t·∫°o l·∫°i kh√¥ng c·∫ßn thi·∫øt
const socket = io({ autoConnect: false });

const App = () => {
    const [schedules, setSchedules] = useState([]);
    const [isConnected, setIsConnected] = useState(socket.connected);
    const [isScheduling, setIsScheduling] = useState(false);
    // L∆∞u tr·ªØ toastId cho c√°c h√†nh ƒë·ªông c·∫ßn c·∫≠p nh·∫≠t sau (v√≠ d·ª•: d·ª´ng stream)
    const [actionToasts, setActionToasts] = useState({}); 
    const [activeTab, setActiveTab] = useState('create');

    useEffect(() => {
        // K·∫øt n·ªëi Socket.IO khi component ƒë∆∞·ª£c mount
        socket.connect();

        // X·ª≠ l√Ω s·ª± ki·ªán k·∫øt n·ªëi/ng·∫Øt k·∫øt n·ªëi
        socket.on('connect', () => { 
            setIsConnected(true); 
            toast.success('ƒê√£ k·∫øt n·ªëi t·ªõi server!'); 
        });
        socket.on('disconnect', () => { 
            setIsConnected(false); 
            toast.error('M·∫•t k·∫øt n·ªëi t·ªõi server!'); 
        });

        // X·ª≠ l√Ω c·∫≠p nh·∫≠t danh s√°ch l·ªãch tr√¨nh t·ª´ server
        const handleBroadcastUpdate = (updatedSchedules) => {
            setSchedules(updatedSchedules);
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa c√°c toast (v√≠ d·ª•: khi stream d·ª´ng)
            setActionToasts(currentToasts => {
                const newToasts = {...currentToasts};
                let toastsChanged = false;
                
                Object.keys(currentToasts).forEach(scheduleId => {
                    const currentToastId = newToasts[scheduleId];
                    const updatedSchedule = updatedSchedules.find(s => s.id === scheduleId);
                    
                    if (updatedSchedule && updatedSchedule.status === 'COMPLETED') {
                        toast.success(`ƒê√£ d·ª´ng lu·ªìng "${updatedSchedule.title}" th√†nh c√¥ng!`, { id: currentToastId });
                        delete newToasts[scheduleId];
                        toastsChanged = true;
                    }
                });
                return toastsChanged ? newToasts : currentToasts;
            });
        };
        
        socket.on('broadcast_update', handleBroadcastUpdate);

        // Cleanup: Ng·∫Øt k·∫øt n·ªëi v√† lo·∫°i b·ªè listeners khi component unmount
        return () => {
            socket.off('connect');
            socket.off('disconnect');
            socket.off('broadcast_update', handleBroadcastUpdate);
            socket.disconnect();
        };
    }, []); // Dependency array r·ªóng ƒë·∫£m b·∫£o hi·ªáu ·ª©ng ch·ªâ ch·∫°y m·ªôt l·∫ßn

    // H√†m x·ª≠ l√Ω vi·ªác t·∫°o l·ªãch tr√¨nh m·ªõi
    const handleSchedule = (formState, callback) => {
        setIsScheduling(true);
        const toastId = toast.loading('ƒêang g·ª≠i v√† x√°c th·ª±c l·ªãch tr√¨nh...');

        const { date, time, duration, durationType, videoInput, ...rest } = formState; // videoInputType ƒë√£ b·ªã lo·∫°i b·ªè
        const combinedDateTime = new Date(`${date}T${time}:00`).toISOString();
        
        const payload = { 
            ...rest, 
            broadcastDateTime: combinedDateTime, 
            durationMinutes: durationType === 'custom' ? parseInt(duration, 10) : null,
            videoUrl: videoInput // Lu√¥n g·ª≠i videoInput d∆∞·ªõi d·∫°ng videoUrl
        };

        // Lo·∫°i b·ªè videoIdentifier v√¨ kh√¥ng c√≤n s·ª≠ d·ª•ng
        delete payload.videoIdentifier; 

        socket.emit('create_schedule', payload, (response) => {
            setIsScheduling(false);
            if (response && response.success) {
                toast.success(`ƒê√£ l√™n l·ªãch "${formState.title}" th√†nh c√¥ng!`, { id: toastId });
                callback(true); 
                setActiveTab('manage'); // Chuy·ªÉn sang tab qu·∫£n l√Ω sau khi t·∫°o th√†nh c√¥ng
            } else {
                const errorMessage = response ? response.error : 'Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server.';
                toast.error(`L·ªói: ${errorMessage}`, { id: toastId, duration: 5000 });
                callback(false);
            }
        });
    };

    // H√†m x·ª≠ l√Ω vi·ªác d·ª´ng m·ªôt l·ªãch tr√¨nh ƒëang ch·∫°y
    const handleStop = (id, title) => {
        if (!window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën D·ª™NG livestream "${title}" kh√¥ng?`)) return;
        const toastId = toast.loading(`ƒêang g·ª≠i y√™u c·∫ßu d·ª´ng "${title}"...`);
        setActionToasts(prev => ({ ...prev, [id]: toastId })); // L∆∞u toastId ƒë·ªÉ c·∫≠p nh·∫≠t sau
        socket.emit('stop_schedule', { id });
    };

    // H√†m x·ª≠ l√Ω vi·ªác x√≥a m·ªôt l·ªãch tr√¨nh
    const handleDelete = (id, title) => {
        if (!window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën X√ìA l·ªãch tr√¨nh "${title}" kh√¥ng?`)) return;
        toast.promise(
             new Promise(resolve => {
                socket.emit('delete_schedule', { id });
                setTimeout(resolve, 500); // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ server x·ª≠ l√Ω
             }), { loading: `ƒêang x√≥a "${title}"...`, success: `ƒê√£ x√≥a "${title}".`, error: 'Kh√¥ng th·ªÉ x√≥a.' }
        );
    };

    // H√†m x·ª≠ l√Ω vi·ªác d·ª´ng kh·∫©n c·∫•p t·∫•t c·∫£ c√°c lu·ªìng
    const handleEmergencyStop = () => {
        if (!window.confirm('‚ö†Ô∏è C·∫¢NH B√ÅO: D·ª´ng KH·∫®N C·∫§P t·∫•t c·∫£ lu·ªìng?\n\nH√†nh ƒë·ªông n√†y s·∫Ω:\n- D·ª´ng T·∫§T C·∫¢ lu·ªìng ƒëang ph√°t\n- Kill m·ªçi process FFmpeg\n- Kh√¥ng th·ªÉ ho√†n t√°c\n\nB·∫°n c√≥ ch·∫Øc ch·∫Øn?')) return;
        
        toast.promise(
            new Promise(resolve => {
                socket.emit('emergency_stop_all');
                setTimeout(resolve, 1000); // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ server x·ª≠ l√Ω
            }),
            {
                loading: 'üö® ƒêang d·ª´ng kh·∫©n c·∫•p t·∫•t c·∫£ lu·ªìng...',
                success: '‚úÖ ƒê√£ d·ª´ng kh·∫©n c·∫•p t·∫•t c·∫£ lu·ªìng!',
                error: '‚ùå L·ªói khi d·ª´ng kh·∫©n c·∫•p'
            }
        );
    };

    return (
        <div className="fixed inset-0 bg-gray-900 text-gray-100 font-sans flex flex-col">
            <Toaster position="bottom-right" toastOptions={{ style: { background: '#1f2937', color: '#f9fafb' } }} />
            
            <header className="w-full p-4 border-b border-gray-700/50 bg-gray-900 flex-shrink-0">
                <div className="flex items-center justify-between">
                    <h1 className="text-2xl font-bold text-white">Youtube Livestream Manager</h1>
                    {schedules.some(s => ['LIVE', 'RETRYING', 'DOWNLOADING_VIDEO', 'QUEUED_FOR_DOWNLOAD'].includes(s.status)) && (
                        <button
                            onClick={handleEmergencyStop}
                            className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-bold rounded-md transition flex items-center space-x-2 text-sm"
                        >
                            <StopCircle size={16} />
                            <span>D·ª´ng Kh·∫©n C·∫•p T·∫•t C·∫£</span>
                        </button>
                    )}
                </div>
            </header>
            
            <main className="flex-1 overflow-hidden flex flex-col">
                <div className="border-b border-gray-700/50 bg-gray-800/50 px-4 md:px-6 lg:px-8">
                    <div className="flex space-x-1">
                        <button
                            onClick={() => setActiveTab('create')}
                            className={`px-6 py-3 font-semibold transition-all ${
                                activeTab === 'create'
                                    ? 'text-blue-400 border-b-2 border-blue-400 bg-gray-800'
                                    : 'text-gray-400 hover:text-gray-300 hover:bg-gray-800/50'
                            }`}
                        >
                            <Plus className="w-4 h-4 inline-block mr-2" />
                            T·∫°o M·ªõi
                        </button>
                        <button
                            onClick={() => setActiveTab('manage')}
                            className={`px-6 py-3 font-semibold transition-all ${
                                activeTab === 'manage'
                                    ? 'text-blue-400 border-b-2 border-blue-400 bg-gray-800'
                                    : 'text-gray-400 hover:text-gray-300 hover:bg-gray-800/50'
                            }`}
                        >
                            <Calendar className="w-4 h-4 inline-block mr-2" />
                            Qu·∫£n L√Ω ({schedules.length})
                        </button>
                    </div>
                </div>
                
                <div className="flex-1 overflow-hidden p-4 md:p-6 lg:p-8">
                    {activeTab === 'create' ? (
                        <div className="h-full max-w-4xl mx-auto">
                            {/* Truy·ªÅn `socket` xu·ªëng ƒë·ªÉ component con c√≥ th·ªÉ g·ª≠i `get_process_stats` */}
                            <CreateStreamForm handleSchedule={handleSchedule} isScheduling={isScheduling} />
                        </div>
                    ) : (
                        <div className="h-full max-w-6xl mx-auto">
                            {/* Truy·ªÅn `socket` xu·ªëng ƒë·ªÉ component con c√≥ th·ªÉ g·ª≠i `get_process_stats` */}
                            <StreamList schedules={schedules} handleDelete={handleDelete} handleStop={handleStop} socket={socket} />
                        </div>
                    )}
                </div>
            </main>
            
            <footer className="w-full p-3 border-t border-gray-700/50 bg-gray-900 flex-shrink-0">
                <p className="text-center text-xs text-gray-500">
                    Tr·∫°ng th√°i k·∫øt n·ªëi: 
                    <span className={`font-semibold ${isConnected ? 'text-green-400' : 'text-red-400'}`}>
                        {isConnected ? ' ‚óè Connected' : ' ‚óè Disconnected'}
                    </span>
                </p>
            </footer>
        </div>
    );
};

export default App;